#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include <regex>
#include <cmath>

// Function to check if a character is an operator (+, -, *, /, ^)
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Function to check if a character is an opening parenthesis
bool isOpeningParenthesis(char c) {
    return c == '(';
}

// Function to check if a character is a closing parenthesis
bool isClosingParenthesis(char c) {
    return c == ')';
}

// Function to get the precedence of an operator
int getOperatorPrecedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Function to convert an infix expression to postfix notation
std::string infixToPostfix(const std::string& infixExpression) {
    std::string postfixExpression;
    std::stack<char> operatorStack;

    for (char c : infixExpression) {
        if (isalnum(c)) {
            postfixExpression += c;
        }
        else if (isOperator(c)) {
            while (!operatorStack.empty() && isOperator(operatorStack.top()) &&
                getOperatorPrecedence(c) <= getOperatorPrecedence(operatorStack.top())) {
                postfixExpression += operatorStack.top();
                operatorStack.pop();
            }
            operatorStack.push(c);
        }
        else if (isOpeningParenthesis(c)) {
            operatorStack.push(c);
        }
        else if (isClosingParenthesis(c)) {
            while (!operatorStack.empty() && !isOpeningParenthesis(operatorStack.top())) {
                postfixExpression += operatorStack.top();
                operatorStack.pop();
            }
            operatorStack.pop();  // Pop the opening parenthesis
        }
    }

    while (!operatorStack.empty()) {
        postfixExpression += operatorStack.top();
        operatorStack.pop();
    }

    return postfixExpression;
}

// Function to evaluate a postfix expression
double evaluatePostfix(const std::string& postfixExpression) {
    std::stack<double> operandStack;

    for (char c : postfixExpression) {
        if (isalnum(c)) {
            operandStack.push(static_cast<double>(c - '0'));
        }
        else if (isOperator(c)) {
            double operand2 = operandStack.top();
            operandStack.pop();
            double operand1 = operandStack.top();
            operandStack.pop();

            double result;
            switch (c) {
            case '+':
                result = operand1 + operand2;
                break;
            case '-':
                result = operand1 - operand2;
                break;
            case '*':
                result = operand1 * operand2;
                break;
            case '/':
                result = operand1 / operand2;
                break;
            case '^':
                result = std::pow(operand1, operand2);
                break;
            default:
                result = 0.0;  // Handle unsupported operators
                break;
            }
            operandStack.push(result);
        }
    }

    return operandStack.top();
}

int main() {
    while (true) {
        std::cout << "Choose a calculator:\n";
        std::cout << "1. Arithmetic Calculator\n";
        std::cout << "2. Scientific Calculator\n";
        std::cout << "3. Exit\n";
        std::cout << "Enter your choice: ";

        int choice;
        std::cin >> choice;

        if (choice == 3) {
            std::cout << "Thank you for using the calculator. Goodbye!\n";
            break;
        }

        std::cin.ignore();  // Clear the newline character from the input buffer

        if (choice == 1) {
            std::cout << "Enter an arithmetic expression: ";
            std::string input;
            std::getline(std::cin, input);

            std::string postfixExpression = infixToPostfix(input);
            double result = evaluatePostfix(postfixExpression);
            std::cout << "Result: " << result << std::endl;
        }
        else if (choice == 2) {
            std::cout << "Enter a scientific expression (e.g., sin(90), cos(45), tan(60), sqrt(25), log(10), exp(2), pow(2, 3)): ";
            std::string input;
            std::getline(std::cin, input);

            if (input.find("sin(") != std::string::npos) {
                // Extract the angle from sin(angle)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("sin\\((.*?)\\)"))) {
                    double angle = std::stod(match[1]);
                    double result = sin(angle);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else if (input.find("cos(") != std::string::npos) {
                // Extract the angle from cos(angle)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("cos\\((.*?)\\)"))) {
                    double angle = std::stod(match[1]);
                    double result = cos(angle);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else if (input.find("tan(") != std::string::npos) {
                // Extract the angle from tan(angle)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("tan\\((.*?)\\)"))) {
                    double angle = std::stod(match[1]);
                    double result = tan(angle);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else if (input.find("sqrt(") != std::string::npos) {
                // Extract the number from sqrt(number)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("sqrt\\((.*?)\\)"))) {
                    double number = std::stod(match[1]);
                    double result = sqrt(number);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else if (input.find("log(") != std::string::npos) {
                // Extract the number from log(number)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("log\\((.*?)\\)"))) {
                    double number = std::stod(match[1]);
                    double result = log(number);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else if (input.find("exp(") != std::string::npos) {
                // Extract the number from exp(number)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("exp\\((.*?)\\)"))) {
                    double number = std::stod(match[1]);
                    double result = exp(number);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else if (input.find("pow(") != std::string::npos) {
                // Extract the base and exponent from pow(base, exponent)
                std::smatch match;
                if (std::regex_search(input, match, std::regex("pow\\((.*?), (.*?)\\)"))) {
                    double base = std::stod(match[1]);
                    double exponent = std::stod(match[2]);
                    double result = std::pow(base, exponent);
                    std::cout << "Result: " << result << std::endl;
                }
                else {
                    std::cerr << "Invalid input." << std::endl;
                }
            }
            else {
                std::cerr << "Unsupported function. Supported functions: sin, cos, tan, sqrt, log, exp, pow." << std::endl;
            }
        }
        else {
            std::cerr << "Invalid choice. Please enter a valid option.\n";
        }
    }

    return 0;
}
